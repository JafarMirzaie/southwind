<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript GroupBy="Always">
  <Columns>
    <Column DisplayName="Vertical Axis" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Sub-bars" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Width" ColumnType="Magnitude" />
  </Columns>
  <Icon FileName="multibars.png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAsdJREFUeNrsmD1rFUEUhmeuN1Y2USLR1iakEKxSCAoWEbG3u6VdSCPiHxA7axFSmcI/IKQSDFprJwGFNBYWNlYxZuccz9fM7N6sUe/uxC3uwmTOfNydh/fM7L4bj4huyNfIDfyaA/YCOHmwPdiNOI7B/vPLuECtkXfOjxaoELunDu8pHmvsYjyycoaGNQnjxRW3eGvLFwNcWnt44kREoD9gLY4DNa2P4sMvr8sq2AokARgQSq1QVQZMsFV5wAYULZqB6m2F4z6ZL2Bo4wUB08INqKPmGEZAUy2mPfYXBawOpgBVGVk4Lj4FFVVTJY+KAHp+1fFj5tv3H8UfGXdurrrNyXU/k4J319daDorsLlFSRKUOoML9XAdghbkGiYELqQmB+nhuAKt5DNzO7kcG7HaK0cBk3ycgrp2AcDaD9NHiQceDAEECCQaaoEHndduDCUh2nrSzQgZUW5Bho4qi1FS/zoOsOHQErGgReaqZSqqAyylMCplaoMrFNsa0mlpyH9sKaJCdAH+GIDcXINs3af/EdFr6BMiUracQBVzVilno7THzZvf9qZzimQF3tu57N8Brblh724NfX1xB9Xi+V+6zS9fc+dsvfWfAc1c3/uoHf/KF2fFo+2D/VRk/2A4F2TQkX2iGwmCnHU8Rw3qiSo32bxxPLe7PbtVVOuae8bhZjSpFwPR7zGa2V0dNfk4XmgaCVh+YVapBljzF955d6HSjS8sX3ZOVR62nuBfAuh8UR4MuvYOTY6F2VVERoxAs1jmf9j675cd75T47eeuAy9YooFmnoLXABAOjcW5LbOPFH9QhmtKQrRXHVa1I2xSTNmSXUxxQFEFTiA5qBcEAWS2NRckQ0w5mZHFmM/pPgIcMIalU5TSVYKlEA659f6B6x1N7F79996HTjdZvrJYFHKofTIBD+hfc9tOJb3y4zw3rHPA/Xr8EGAASLnxI0iSooQAAAABJRU5ErkJggg==]]></Icon>
  <Script><![CDATA[function DrawChart(chart, data){
  
  var dimension1 = _.uniq(_.map(data.rows, function(r){return r.c0; }), false, function(c) { return getKey(c);});
  
  var series = _.toArray(º.groupBy(data.rows, function(r){return getKey(r.c1);}, function(list){
    
    var obj = º.toObject(list, function(r){return getKey(r.c0); });
    
    return {
      dimension2 : _.first(list).c1,
      values : _.map(dimension1, function(d1){ return obj[getKey(d1)]; })
    };
    
  }
                                  ));
  
  //config variables
  var yAxisLabelWidth = 100,
      fontSize = 10,
      ticksLength = 4,
      labelMargin = 5,
      chartAxisPadding = 5,
      padding = 5,
      yAxisLeftPosition = padding + fontSize + +yAxisLabelWidth + (2 * labelMargin) + ticksLength,
        xAxisTopPosition = height - padding - (fontSize * 2) - (labelMargin * 2) - ticksLength,
          color = d3.scale.category20().domain([0, $.map(series, function (s) { return getKey(s.dimension2); })]);
  
  //x axis scale
  var x = d3.scale.linear()
      .domain([0, _.max(data.rows, function(r){return r.c2}).c2])
      .range([0, width - yAxisLeftPosition - padding]);
  
  //y axis scale
  var y = d3.scale.ordinal()
      .domain($.map(dimension1, function (v) { return getKey(v); }))
      .rangeBands([0, xAxisTopPosition - padding - fontSize - labelMargin - (2 * chartAxisPadding)]);
  
  //paint x-axis - ruler
  var xTicks = x.ticks(10);
  chart.append('svg:g').attr('class', 'x-ruler').attr('transform', 'translate(' + yAxisLeftPosition + ', ' + (padding + fontSize + labelMargin) + ')')
    .enterData(xTicks, 'line', 'x-ruler')
      .attr('x1', x)
      .attr('x2', x)
      .attr('y2', xAxisTopPosition - padding - fontSize - labelMargin);
  
  //paint x-axis ticks
  chart.append('svg:g').attr('class', 'x-axis-tick').attr('transform', 'translate(' + yAxisLeftPosition + ', ' + xAxisTopPosition + ')')
    .enterData(xTicks, 'line', 'x-axis-tick')
    .attr('y2', ticksLength)
    .attr('x1', x)
    .attr('x2', x);
  
  //paint x-axis tick labels
  chart.append('svg:g').attr('class', 'x-axis-tick-label').attr('transform', 'translate(' + yAxisLeftPosition + ', ' + (xAxisTopPosition + ticksLength + labelMargin + fontSize) + ')')
    .enterData(xTicks, 'text', 'x-axis-tick-label')
      .attr('x', x)
      .attr('text-anchor', 'middle')
      .text(String);
  
  //paint x-axis - token label
  chart.append('svg:g').attr('class', 'x-axis-token-label').attr('transform', 'translate(' + (yAxisLeftPosition + ((width - yAxisLeftPosition) / 2)) + ', ' + (height) + ')')
    .append('svg:text').attr('class', 'x-axis-token-label')
      .attr('text-anchor', 'middle')
      .text(data.columns.c2.title);
  
  //paint y-axis - ticks
  chart.append('svg:g').attr('class', 'y-axis-tick').attr('transform', 'translate(' + (yAxisLeftPosition - ticksLength) + ', ' + (padding + fontSize + labelMargin + chartAxisPadding + (y.rangeBand() / 2)) + ')')
    .enterData(dimension1, 'line', 'y-axis-tick')
      .attr('x2', ticksLength)
      .attr('y1', function (v) { return y(getKey(v)); })
      .attr('y2', function (v) { return y(getKey(v)); });
  
  //paint y-axis - tick labels
  chart.append('svg:g').attr('class', 'y-axis-tick-label').attr('transform', 'translate(' + (yAxisLeftPosition - ticksLength - labelMargin) + ', ' + (padding + fontSize + labelMargin + chartAxisPadding + (y.rangeBand() / 2)) + ')')
    .enterData(dimension1, 'text', 'y-axis-tick-label')
      .attr('y', function (v) { return y(getKey(v)); })
      .attr('dominant-baseline', 'middle')
      .attr('text-anchor', 'end')
      .text(function (v) { return getLabel(v); });
  
  //paint y-axis - token label
  chart.append('svg:g').attr('class', 'y-axis-token-label').attr('transform', 'translate(' + fontSize + ', ' + ((xAxisTopPosition - fontSize - labelMargin) / 2) + ') rotate(270)')
    .append('svg:text').attr('class', 'y-axis-token-label')
      .attr('text-anchor', 'middle')
      .text(data.columns.c0.title);
  
  var interMagin = 2;
  
  //graph y-subscale
  var ySubscale = d3.scale.ordinal()
      .domain($.map(series, function (s) { return getKey(s.dimension2); }))
      .rangeBands([interMagin, y.rangeBand()-interMagin]);
  
  //paint graph
  chart.enterData(series, 'g', 'shape-serie').attr('transform', 'translate(' + yAxisLeftPosition + ', ' + (padding + fontSize + labelMargin + chartAxisPadding) + ')')
    .enterData(function (s) {   return s.values; }, 'rect', 'shape')
      .attr('stroke', function (r) { return SF.isEmpty(r.c2) ? 'none' : '#fff'; })
      .attr('fill', function (r) { return SF.isEmpty(r.c2) ? 'none' : getColor(r.c1, color); })
      .attr('y', function (r) { return ySubscale(getKey(r.c1)); })
      .attr('transform', function (r) { return 'translate(0, ' + y(getKey(r.c0)) + ')'; })
      .attr('height', ySubscale.rangeBand())
      .attr('width', function (r) { return SF.isEmpty(r.c2) ? 0 : x(getLabel(r.c2)); })
      .attr('data-click', function (r) { return getClickKeys(r, data.columns); })
      .append('svg:title')
      .text(function (r) { return SF.isEmpty(r.c2) ? null : getLabel(r.c0) + ', ' + getLabel(r.c1) + ': ' + getLabel(r.c2); })
      
      //paint x-axis
      chart.append('svg:g').attr('class', 'x-axis').attr('transform', 'translate(' + yAxisLeftPosition + ', ' + xAxisTopPosition + ')')
        .append('svg:line')
        .attr('class', 'x-axis')
        .attr('x2', width - yAxisLeftPosition - padding);
  
  //paint y-axis
  chart.append('svg:g').attr('class', 'y-axis').attr('transform', 'translate(' + yAxisLeftPosition + ', ' + (padding + fontSize + labelMargin) + ')')
    .append('svg:line')
      .attr('class', 'y-axis')
      .attr('y2', xAxisTopPosition - padding - fontSize - labelMargin);
  
  //paint color legend
  var legendScale = d3.scale.ordinal().domain($.map(series, function (s, i) { return i; })).rangeBands([0, width - yAxisLeftPosition - padding]),
      legendRectWidth = 10,
      legendLabelWidth = legendScale.rangeBand() - (2 * labelMargin) - legendRectWidth;
  
  if (legendLabelWidth + labelMargin + legendRectWidth > yAxisLabelWidth * 2) {
    chart.append('svg:g').attr('class', 'color-legend').attr('transform', 'translate(' + yAxisLeftPosition + ', ' + padding + ')')
      .enterData(series, 'rect', 'color-rect')
      .attr('x', function (e, i) { return (legendRectWidth + legendLabelWidth + (2 * labelMargin)) * i; })
      .attr('width', legendRectWidth).attr('height', fontSize)
      .attr('fill', function (s) { return getColor(s.dimension2, color); });
    
    chart.append('svg:g').attr('class', 'color-legend').attr('transform', 'translate(' + (yAxisLeftPosition + labelMargin + legendRectWidth) + ', ' + (padding + fontSize) + ')')
      .enterData(series, 'text', 'color-text')
        .attr('x', function (e, i) { return (legendRectWidth + legendLabelWidth + (2 * labelMargin)) * i; })
        .text(function (s) { return getLabel(s.dimension2); });
  }
  
  
}
]]></Script>
</ChartScript>