<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript Name="Line" GroupBy="Always">
  <Columns>
    <Column DisplayName="Horizontal Axis" ColumnType="Groupable" />
    <Column DisplayName="Height" ColumnType="Magnitude" />
  </Columns>
  <Icon FileName="columns.png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAd5JREFUeNrsmL9KA0EQxudErEXwGawlndgpiI8gkkewEh/Cwpcwhb1dCsFYaZVSBO3sBEvN3e3MuLN/klPvLifxbhdxYJmkWX58833DcgkzQ8y1BJHXP+CvAPaPB9Eacbmti88vx3x9+whIBIjkOgO5/0QMu9sbcHS4lQQBHN09wf5OD0hvCaUI0lxBmimYpAreU+k5DG/uBTCMB8mtL9ZKefXkKLQKSm+y4loDZBIAC0oO0sDp34psb7KCW1VQFEJyB3nmR3eCKiiqTdUrhMSO2Page5ALo/XKFf0nqgYFJK4OhwcOqyBVh8PvwYUX9evwgLOXce0FK+ubsLZ3kZQrWB4OdOALA749j2C1d1J7wcPVqQYsD0lVODAGDzJzZTjQjb91QCZVAwiV4fArqFVAZu0hxjjfgxZO1SoY9sGqARlznYQ0PkCjGls4xsgAve8YMwMqPRrAqe8ETo/XqEd5RAp637E7FFFIvvqO1cQqGMOaKfWdgImiUShY8J3x3BS2ff81U7DgOwuadTLaRoDmTUn5N9+ZsccAqMRqOJmNtCPf/WzEzndgkozQdc1RkO2+c77rcrSNANkrKD4MADcXkHxIAsFJJfI0j+3z2+Csn3wCjLn+PwH/ecAPAQYAxTJXxEeMT4QAAAAASUVORK5CYII=]]></Icon>
  <Script><![CDATA[var chart = d3.select('#sfChartControl .sf-chart-container')
	.append('svg:svg').attr('width', width).attr('height', height);

//config variables
var yAxisLabelWidth = 60,
	fontSize = 0,
	ticksLength = 4,
	labelMargin = 5,
	chartAxisPadding = 5,
	padding = 5,
	yAxisLeftPosition = padding + fontSize + yAxisLabelWidth + (2 * labelMargin) + ticksLength,
	xAxisTopPosition = height - padding - (fontSize * 3) - (labelMargin * 3) - ticksLength,
	color = 'steelblue';

//x axis scale
var x = d3.scale.ordinal()
	.domain($.map(data.serie, function (e) { return myChart.getTokenKey(e.dimension1); }))
	.rangeBands([0, width - yAxisLeftPosition - padding - (2 * chartAxisPadding)]);

//y axis scale
var y = d3.scale.linear()
	.domain([0, d3.max($.map(data.serie, function (e) { return myChart.getTokenKey(e.value1); }))])
	.range([0, xAxisTopPosition - padding]);

//paint x-axis ticks
chart.append('svg:g').attr('class', 'x-axis-tick').attr('transform', 'translate(' + (yAxisLeftPosition + (x.rangeBand() / 2)) + ', ' + xAxisTopPosition + ')')
	.enterData(data.serie, 'line', 'x-axis-tick')
	.attr('y2', function (v, i) { return (i % 2 == 0 ? ticksLength : (ticksLength + fontSize + labelMargin)); })
	.attr('x1', function (v) { return x(myChart.getTokenKey(v.dimension1)); })
	.attr('x2', function (v) { return x(myChart.getTokenKey(v.dimension1)); });

//paint x-axis tick labels
chart.append('svg:g').attr('class', 'x-axis-tick-label').attr('transform', 'translate(' + (yAxisLeftPosition + (x.rangeBand() / 2)) + ', ' + (xAxisTopPosition + ticksLength + labelMargin + fontSize) + ')')
	.enterData(data.serie, 'text', 'x-axis-tick-label')
	.attr('x', function (v) { return x(myChart.getTokenKey(v.dimension1)); })
	.attr('y', function (v, i) { return (i % 2 == 0 ? 0 : (fontSize + labelMargin)); })
	.attr('text-anchor', 'middle')
	.text(function (v) { return myChart.getTokenKey(v.dimension1); });

//paint x-axis - token label
chart.append('svg:g').attr('class', 'x-axis-token-label').attr('transform', 'translate(' + (yAxisLeftPosition + ((width - yAxisLeftPosition) / 2)) + ', ' + (height) + ')')
	.append('svg:text').attr('class', 'x-axis-token-label')
	.attr('text-anchor', 'middle')
	.text(data.labels.dimension1);

//paint y-axis - ruler
var yTicks = y.ticks(8);
chart.append('svg:g').attr('class', 'y-ruler').attr('transform', 'translate(' + yAxisLeftPosition + ', ' + xAxisTopPosition + ')')
	.enterData(yTicks, 'line', 'y-ruler')
	.attr('x2', width - yAxisLeftPosition - padding)
	.attr('y1', function (t) { return -y(t); })
	.attr('y2', function (t) { return -y(t); });

//paint y-axis - ticks
chart.append('svg:g').attr('class', 'y-axis-tick').attr('transform', 'translate(' + (yAxisLeftPosition - ticksLength) + ', ' + xAxisTopPosition + ')')
	.enterData(yTicks, 'line', 'y-axis-tick')
	.attr('x2', ticksLength)
	.attr('y1', function (t) { return -y(t); })
	.attr('y2', function (t) { return -y(t); });

//paint y-axis - tick labels
chart.append('svg:g').attr('class', 'y-axis-tick-label').attr('transform', 'translate(' + (yAxisLeftPosition - ticksLength - labelMargin) + ', ' + xAxisTopPosition + ')')
	.enterData(yTicks, 'text', 'y-axis-tick-label')
	.attr('y', function (t) { return -y(t); })
	.attr('dominant-baseline', 'middle')
	.attr('text-anchor', 'end')
	.text(String);

//paint y-axis - token label
chart.append('svg:g').attr('class', 'y-axis-token-label').attr('transform', 'translate(' + fontSize + ', ' + (xAxisTopPosition / 2) + ') rotate(270)')
	.append('svg:text').attr('class', 'y-axis-token-label')
	.attr('text-anchor', 'middle')
	.text(data.labels.value1);

//paint graph - line
chart.append('svg:g').attr('class', 'shape').attr('transform', 'translate(' + (yAxisLeftPosition + chartAxisPadding + (x.rangeBand() / 2)) + ', ' + xAxisTopPosition + ') scale(1, -1)')
	.append('svg:path').attr('class', 'shape')
	.attr('stroke', color)
	.attr('fill', 'none')
	.attr('stroke-width', 3)
	.attr('shape-rendering', 'initial')
	.attr('d', myChart.getPathPoints($.map(data.serie, function (v) { return { x: x(myChart.getTokenKey(v.dimension1)), y: y(myChart.getTokenKey(v.value1)) }; })))

//paint graph - hover area trigger
chart.append('svg:g').attr('class', 'hover-trigger').attr('transform', 'translate(' + (yAxisLeftPosition + chartAxisPadding + (x.rangeBand() / 2)) + ', ' + xAxisTopPosition + ') scale(1, -1)')
	.enterData(data.serie, 'circle', 'hover-trigger')
	.attr('cx', function (v) { return x(myChart.getTokenKey(v.dimension1)); })
	.attr('cy', function (v) { return y(myChart.getTokenKey(v.value1)); })
	.attr('r', 15)
	.attr('fill', '#fff')
	.attr('fill-opacity', 0)
	.attr('stroke', 'none')
	.attr('data-d1', function (v) { return myChart.getTokenKey(v.dimension1); })
	.attr('data-entity', function (v) { return v.entity || ''; })
	.append('svg:title')
	.text(function (v) { return myChart.getTokenLabel(v.dimension1) + ': ' + myChart.getTokenLabel(v.value1); })

//paint graph - points
chart.append('svg:g').attr('class', 'point').attr('transform', 'translate(' + (yAxisLeftPosition + chartAxisPadding + (x.rangeBand() / 2)) + ', ' + xAxisTopPosition + ') scale(1, -1)')
	.enterData(data.serie, 'circle', 'point')
	.attr('fill', color)
	.attr('r', 5)
	.attr('cx', function (v) { return x(myChart.getTokenKey(v.dimension1)); })
	.attr('cy', function (v) { return y(myChart.getTokenKey(v.value1)); })
	.attr('data-d1', function (v) { return myChart.getTokenKey(v.dimension1); })
	.attr('data-entity', function (v) { return v.entity || ''; })
	.append('svg:title')
	.text(function (v) { return myChart.getTokenLabel(v.dimension1) + ': ' + myChart.getTokenLabel(v.value1); })

//paint x-axis
chart.append('svg:g').attr('class', 'x-axis').attr('transform', 'translate(' + yAxisLeftPosition + ', ' + xAxisTopPosition + ')')
	.append('svg:line')
	.attr('class', 'x-axis')
	.attr('x2', width - yAxisLeftPosition - padding);

//paint y-axis
chart.append('svg:g').attr('class', 'y-axis').attr('transform', 'translate(' + yAxisLeftPosition + ', ' + padding + ')')
	.append('svg:line')
	.attr('class', 'y-axis')
	.attr('y2', xAxisTopPosition - padding);

//bind mouse events
myChart.bindMouseClick($('#sfChartControl .sf-chart-container'));
]]></Script>
</ChartScript>