@using Southwind.Entities

@using (var oc = Html.TypeContext<OrderDN>())
{
    oc.LabelColumns = new BsColumn(4);
    <div class="col-md-6">
        @Html.ValueLine(oc, o => o.ShipName)
        @Html.EntityLine(oc, o => o.Customer, el =>
                        {
                            el.AttachFunction = new JsLineFunction("Order", "attachCustomerEntityLine",
                                new FindOptions(typeof(CustomerDN)).ToJS(el.Prefix));
                        })
        @Html.EmbeddedControl(oc, o => o.ShipAddress, ec => ec.ViewData = new Dictionary<string, object> { { "Legend", Html.PropertyNiceName(() => oc.Value.ShipAddress) } })
    </div>
    
    <div class="col-md-6">
        @Html.ValueLine(oc, o => o.TotalPrice)
        @Html.EntityLine(oc, o => o.Employee)
        @Html.ValueLine(oc, o => o.OrderDate)
        @Html.ValueLine(oc, o => o.RequiredDate)
        @Html.ValueLine(oc, o => o.ShippedDate)
        @Html.EntityCombo(oc, o => o.ShipVia)
        @Html.ValueLine(oc, o => o.Freight)
        @Html.ValueLine(oc, o => o.IsLegacy)
    </div>
    
    <div class="form-inline">
        @using (var sc = oc.SubContext())
        {
            sc.FormGroupStyle = FormGroupStyle.SrOnly;
            sc.PlaceholderLabels = true;
            @Html.EntityRepeater(sc, o => o.Details);
        }
    </div>
}
