<?xml version="1.0" encoding="utf-8"?>
<File>
  <Modules>
    <Module Name="ExampleEntities">
      <RemoveFiles Path="Southwind.Entities\Address.cs"/>
      <RemoveFiles Path="Southwind.Entities\Customer.cs"/>
      <RemoveFiles Path="Southwind.Entities\Employee.cs"/>
      <RemoveFiles Path="Southwind.Entities\Order.cs"/>
      <RemoveFiles Path="Southwind.Entities\Product.cs"/>

      <RemoveLine Path="Southwind.Load\Program.cs" Line="{100, ShowOrder},"/>
      <RemoveLine Path="Southwind.Load\Program.cs" From="static void ShowOrder()" To="}//ShowOrder"/>

      <RemoveFiles Path="Southwind.Logic\CustomerLogic.cs"/>
      <RemoveFiles Path="Southwind.Logic\EmployeeLogic.cs"/>
      <RemoveFiles Path="Southwind.Logic\OrderLogic.cs"/>
      <RemoveFiles Path="Southwind.Logic\ProductLogic.cs"/>
      <RemoveFiles Path="Southwind.Logic\ShipperLogic.cs"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="EmployeeLogic.Start(sb, dqm);" To="ShipperLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs"
                  From="TypeConditionLogic.Register&lt;OrderEntity>(SouthwindGroup.UserEntities, o => o.Employee == EmployeeEntity.Current);"
                  To="TypeConditionLogic.Register&lt;CompanyEntity>(SouthwindGroup.CurrentCustomer, o => o == CustomerEntity.Current);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="CacheLogic.CacheTable&lt;ShipperEntity>(sb);"/>


    </Module>

    <Module Name="Windows">
      <RemoveFiles Path="Southwind.Windows"/>
      <RemoveFiles Path="Southwind.Entities\IServerSouthwind.cs"/>
      <RemoveFiles Path="Southwind.React\ServerSouthwind.svc"/>
      <RemoveFiles Path="Southwind.React\ServerSouthwind.svc.cs"/>
      <RemoveLine Path="Southwind.React\Web.config" From="&lt;wsHttpBinding&gt;" To="&lt;/wsHttpBinding>"/>
      <RemoveLine Path="Southwind.React\Web.config" From="&lt;services>" To="&lt;/services>"/>
      <RemoveLine Path="Southwind.React\Web.config" From="&lt;behaviors>" To="&lt;/behaviors>"/>
      <RemoveLine Path="Southwind.React\Web.config" From="&lt;!--Uncomment to trace WCF info -->" To="&lt;/system.diagnostics&gt;--&gt;"/>

      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Windows\App.xaml.cs" Line="using Southwind.Windows.Controls;"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Windows\Code\SouthwindClient.cs" Line="using Southwind.Windows.Controls;"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Windows\Code\SouthwindClient.cs"
                  From="new EntitySettings&lt;EmployeeEntity>() { View = e => new Employee()},"
                  To="new EntitySettings&lt;OrderEntity>() { View = e => new Order()},"/>
      <RemoveLine DependsOn="ExampleEntities"
                  Path="Southwind.Windows\Code\SouthwindClient.cs"
                  From="Constructor.Register(ctx => new EmployeeEntity { Address = new AddressEmbedded() });"
                  To="//NotDefined"/>
      <RemoveFiles DependsOn="ExampleEntities"
                   Path="Southwind.Windows\Controls"/>
      <RemoveLine DependsOn="ExampleEntities"
                  Path="Southwind.Windows\Main.xaml"
                  From="&lt;MenuItem Header=&quot;{m:LocTypePlural {x:Type d:OrderEntity}}&quot;>"
                  To="&lt;!--Admin-->"/>
    </Module>

    <Module Name="ExampleReact" DependsOn="ExampleEntities" >
      <RemoveLine Path="Southwind.React\App\Southwind\SouthwindClient.tsx"
                  From="import { /*Southwind.Entities*/"
                  To="} from './Southwind.Entities'"/>
      <RemoveLine Path="Southwind.React\App\Southwind\SouthwindClient.tsx"
                  From="Navigator.addSettings(new EntitySettings(AddressEmbedded, a => import('./Templates/Address')));"
                  To="}));//Ship"/>
      <RemoveLine Path="Southwind.React\App\Southwind\SouthwindClient.tsx"
                  Line="import OrderFilter from './Templates/OrderFilter'"/>

      <RemoveFiles Path="Southwind.React\App\Southwind\Templates\Address.tsx"/>
      <RemoveFiles Path="Southwind.React\App\Southwind\Templates\Category.tsx"/>
      <RemoveFiles Path="Southwind.React\App\Southwind\Templates\Company.tsx"/>
      <RemoveFiles Path="Southwind.React\App\Southwind\Templates\Employee.tsx"/>
      <RemoveFiles Path="Southwind.React\App\Southwind\Templates\Order.tsx"/>
      <RemoveFiles Path="Southwind.React\App\Southwind\Templates\OrderFilter.tsx"/>
      <RemoveFiles Path="Southwind.React\App\Southwind\Templates\Person.tsx"/>
      <RemoveFiles Path="Southwind.React\App\Southwind\Templates\Product.tsx"/>
      <RemoveFiles Path="Southwind.React\App\Southwind\Templates\Supplier.tsx"/>
      <RemoveLine Path="Southwind.React\App\Layout.tsx"
                  Line="&lt;LinkContainer to=&quot;~/find/order&quot;>&lt;MenuItem>Orders&lt;/MenuItem>&lt;/LinkContainer>" />"/>
    </Module>

    <Module Name="Disconnected" DependsOn="Windows">
      <RemoveFiles Path="Southwind.Local"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="DisconnectedLogic.Start(sb, dqm);" To="DisconnectedLogic.DatabaseFolder = @&quot;D:\SouthwindTemp\Database&quot;;"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="SetupDisconnectedStrategies(sb);"/>
      <RemoveFiles Path="Southwind.Logic\Starter.Disconnected.cs"/>
      <RemoveLine Path="Southwind.Logic\Starter.Disconnected.cs" DependsOn="ExampleEntities"
                  From="Expression&lt;Func&lt;OperationLogEntity, bool>> operationLogCondition = ol =>"
                  To="DisconnectedLogic.Register&lt;OperationLogEntity>(operationLogCondition, Upload.New);"/>
      <RemoveLine Path="Southwind.Logic\Starter.Disconnected.cs" DependsOn="ExampleEntities"
                  From="DisconnectedLogic.Register&lt;ExceptionEntity>(e => Database.Query&lt;OperationLogEntity>()"
                  To=".Any(ol => operationLogCondition.Evaluate(ol) &amp;&amp; ol.Exception.RefersTo(e)), Upload.New);"/>
      <RemoveLine Path="Southwind.Logic\Starter.Disconnected.cs" DependsOn="ExampleEntities"
            From="DisconnectedLogic.Register&lt;EmployeeEntity>(Download.All, Upload.None);"
            To="DisconnectedLogic.Register&lt;ShipperEntity>(Download.All, Upload.None);" />
      <RemoveLine Path="Southwind.Windows\Program.cs" Line="using Southwind.Local;"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="public enum StartOption" To="}"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="if (RunLocally())" To="else //Run remotely"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="if (!Server.OfflineMode)" To="}"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="if (Server.OfflineMode)" To="LocalServer.Stop();"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="private static bool RunLocally()" To="}//RunLocally"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="private static void UploadIfNecessary()" To="}//UploadIfNecessary"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="using Southwind.Local;"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="DisconnectedClient.Start();"/>
      <RemoveFiles Path="Southwind.React\ServerSouthwindTransfer.svc"/>
      <RemoveFiles Path="Southwind.React\ServerSouthwindTransfer.svc.cs"/>
      <RemoveLine Path="Southwind.React\Web.config" From="&lt;basicHttpBinding>" To="&lt;/basicHttpBinding>"/>
      <RemoveLine Path="Southwind.React\Web.config" From="&lt;service name=&quot;Southwind.React.ServerSouthwindTransfer&quot; behaviorConfiguration=&quot;TransferBehavior&quot;&gt;" To="&lt;/service&gt;"/>
      <RemoveLine Path="Southwind.React\Web.config" From="&lt;behavior name=&quot;TransferBehavior&quot;&gt;" To="&lt;/behavior&gt;"/>
      <RemoveLine Path="Southwind.Windows\Main.xaml" From="&lt;MenuItem Header=&quot;Disconnected&quot; x:Name=&quot;miDisconnected&quot;>" To="&lt;/MenuItem>"/>
      <RemoveLine Path="Southwind.Windows\Main.xaml.cs" From="if (Server.OfflineMode)" To="} //OfflineMode"/>
      <RemoveLine Path="Southwind.Windows\Main.xaml.cs" From="private void miDownload_Click(object sender, RoutedEventArgs e)" To="} //Disconnected"/>
    </Module>

    <Module Name="Migrations">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="MigrationLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Load\Program.cs" From="if (args.Any())" To="} //if(args.Any())"/>
      <RemoveLine Path="Southwind.Load\Program.cs" Line="{&quot;SQL&quot;, SqlMigrationRunner.SqlMigrations},"/>
      <RemoveLine Path="Southwind.Load\Program.cs" Line="{&quot;CS&quot;, () => SouthwindMigrations.CSharpMigrations(false), &quot;C# Migrations&quot;},"/>
      <RemoveLine Path="Southwind.Load\SouthwindMigrations.cs" From="public static void CSharpMigrations(bool autoRun)" To="} //CSharpMigrations"/>
    </Module>

    <Module Name="LoadNorthwind" DependsOn="ExampleEntities,Migrations">
      <RemoveLine Path="Southwind.Load\SouthwindMigrations.cs" From="EmployeeLoader.LoadRegions," To="OrderLoader.UpdateOrdersDate,"/>
      <RemoveFiles Path="Southwind.Load\CustomerLoader.cs"/>
      <RemoveFiles Path="Southwind.Load\EmployeeLoader.cs"/>
      <RemoveFiles Path="Southwind.Load\Northwind.dbml"/>
      <RemoveFiles Path="Southwind.Load\Northwind.dbml.layout"/>
      <RemoveFiles Path="Southwind.Load\Northwind.designer.cs"/>
      <RemoveFiles Path="Southwind.Load\NorthwindPartials.cs"/>
      <RemoveFiles Path="Southwind.Load\OrderLoader.cs"/>
      <RemoveFiles Path="Southwind.Load\ProductLoader.cs"/>
      <RemoveFiles Path="Southwind.Load\SupplierFaxes.csv"/>
    </Module>

    <Module Name="UserQuery">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((UserQueryEntity uq) => uq.Owner).Replace(new ImplementedByAttribute(typeof(UserEntity), typeof(RoleEntity)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserQueryLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserQueryLogic.RegisterUserTypeCondition(sb, SouthwindGroup.UserEntities);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserQueryLogic.RegisterRoleTypeCondition(sb, SouthwindGroup.RoleEntities);"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="UserQueryServer.Start(config);"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as UserQueryClient from &quot;../../Extensions/Signum.React.Extensions/UserQueries/UserQueryClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="UserQueryClient.start({ routes });"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\App\Main.tsx" Line="import UserQueryOmniboxProvider from &quot;../../Extensions/Signum.React.Extensions/UserQueries/UserQueryOmniboxProvider&quot;"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\App\Main.tsx" Line="new UserQueryOmniboxProvider(),"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\Global.asax.cs" Line="new UserQueryOmniboxResultGenerator(UserQueryLogic.Autocomplete),"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="UserQueryClient.Start();"/>
      <RemoveLine Path="Southwind.Windows\Main.xaml" Line="&lt;MenuItem Tag=&quot;{m:Explore QueryName={x:Type seu:UserQueryEntity}}&quot;/>"/>
    </Module>

    <Module Name="Word">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="WordTemplateLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as WordClient from &quot;../../Extensions/Signum.React.Extensions/Word/WordClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="WordClient.start({ routes, contextual: true, queryButton: true, entityButton: false });"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="WordServer.Start(config);"/>
      <RemoveLine DependsOn="ExampleEntities,Migrations" Path="Southwind.Load\SouthwindMigrations.cs" Line="ImportWordReportTemplateForOrder,"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Load\SouthwindMigrations.cs" From="public static void ImportWordReportTemplateForOrder()" To="}"/>
      <RemoveFiles DependsOn="ExampleEntities" Path="Southwind.Load\WordTemplates\Order.docx"/>
    </Module>

    <Module Name="Chart" DependsOn="Files">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((UserChartEntity uc) => uc.Owner).Replace(new ImplementedByAttribute(typeof(UserEntity), typeof(RoleEntity)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="ChartLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserChartLogic.RegisterUserTypeCondition(sb, SouthwindGroup.UserEntities);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserChartLogic.RegisterRoleTypeCondition(sb, SouthwindGroup.RoleEntities);"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as ChartClient from &quot;../../Extensions/Signum.React.Extensions/Chart/ChartClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="ChartClient.start({ routes });"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\App\Main.tsx" Line="import ChartOmniboxProvider from &quot;../../Extensions/Signum.React.Extensions/Chart/ChartOmniboxProvider&quot;"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\App\Main.tsx" Line="import UserChartOmniboxProvider from &quot;../../Extensions/Signum.React.Extensions/Chart/UserChartOmniboxProvider&quot;"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\App\Main.tsx" Line="new ChartOmniboxProvider(),"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\App\Main.tsx" Line="new UserChartOmniboxProvider(),"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\Global.asax.cs" Line="new ChartOmniboxResultGenerator(),"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\Global.asax.cs" Line="new UserChartOmniboxResultGenerator(UserChartLogic.Autocomplete),"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="ChartServer.Start(config);"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="ChartClient.Start();"/>
      <RemoveLine Path="Southwind.Load\Program.cs" Line="{42, ChartScriptLogic.ImportExportChartScripts},"/>
      <RemoveLine Path="Southwind.Windows\Main.xaml" Line="&lt;MenuItem Tag=&quot;{m:Explore QueryName={x:Type sec:UserChartEntity}}&quot;/>"/>
    </Module>

    <Module Name="Files">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="FilePathEmbeddedLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="FileLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as FilesClient from &quot;../../Extensions/Signum.React.Extensions/Files/FilesClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="FilesClient.start({ routes });"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="FilesServer.Start(config);"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="FilePathClient.Start();"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Entities\Employee.cs" Line="public Lite&lt;FileEntity> Photo { get; set; }"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Entities\Product.cs" Line="public FileEmbedded Picture { get; set; }"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Load\EmployeeLoader.cs" Line="Photo = new FileEntity { FileName = e.PhotoPath.AfterLast('/'), BinaryFile = RemoveOlePrefix(e.Photo.ToArray()) }.ToLiteFat(),"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Load\EmployeeLoader.cs" From="public static byte[] RemoveOlePrefix(byte[] bytes)" To="} //RemoveOlePrefix"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Load\ProductLoader.cs" Line="Picture = new FileEmbedded { FileName = s.CategoryName + &quot;.jpg&quot;, BinaryFile = EmployeeLoader.RemoveOlePrefix(s.Picture.ToArray()) },"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Logic\ProductLogic.cs" Line="s.Picture"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Logic\EmployeeLogic.cs" Line="e.Photo, //1"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Logic\EmployeeLogic.cs" Line="e.Photo, //2"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.React\App\Southwind\SouthwindClient.tsx" From="{/*Files*/}" To="{/*Files*/}"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.React\App\Southwind\Templates\Category.tsx" Line="&lt;FileLine ctx={ctx.subCtx(c => c.picture)} onChange={() => this.forceUpdate()} />"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.React\App\Southwind\Templates\Category.tsx" From="&lt;div className=&quot;col-sm-3&quot;>{/*photo*/}" To="&lt;/div>{/*photo*/}"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.React\App\Southwind\Templates\Employee.tsx" From="{/*photo*/}" To="{/*photo*/}"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Windows\Code\SouthwindClient.cs" From="QuerySettings.RegisterPropertyFormat((EmployeeEntity e) => e.Photo, b =>" To="}); //Picture"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Windows\Controls\Category.xaml" From="&lt;f:FileLine m:Common.Route=&quot;Picture&quot; />" To="&lt;/Border>"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Windows\Controls\Employee.xaml" From="&lt;StackPanel  Grid.Column=&quot;1&quot; Grid.Row=&quot;0&quot;>" To="&lt;/StackPanel>"/>
      <RemoveFiles DependsOn="ExampleEntities" Path="Southwind.Windows\SouthwindConverters.cs"/>
    </Module>

    <Module Name="Excel">
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as ExcelClient from &quot;../../Extensions/Signum.React.Extensions/Excel/ExcelClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="ExcelClient.start({ routes, plainExcel: true, excelReport: true });"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="ExcelServer.Start(config);"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="ExcelClient.Start(toExcel: true, excelReport: false);"/>
    </Module>

    <Module Name="Dashboard" DependsOn="Chart,UserQuery">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((DashboardEntity cp) => cp.Owner).Replace(new ImplementedByAttribute(typeof(UserEntity), typeof(RoleEntity)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="DashboardLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="ViewLogLogic.Start(sb, dqm, new HashSet&lt;Type> { typeof(UserQueryEntity), typeof(UserChartEntity), typeof(DashboardEntity) });"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="DashboardLogic.RegisterUserTypeCondition(sb, SouthwindGroup.UserEntities);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="DashboardLogic.RegisterRoleTypeCondition(sb, SouthwindGroup.RoleEntities);"/>
      <RemoveLine Path="Southwind.React\App\Home.tsx" From="if (true as any) {" To="else //Dashboard"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as DashboardClient from &quot;../../Extensions/Signum.React.Extensions/Dashboard/DashboardClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="DashboardClient.start({ routes });"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="DashboardServer.Start(config);"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\App\Main.tsx" Line="import DashboardOmniboxProvider from &quot;../../Extensions/Signum.React.Extensions/Dashboard/DashboardOmniboxProvider&quot;"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\App\Main.tsx" Line="new DashboardOmniboxProvider(),"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\Global.asax.cs" Line="new DashboardOmniboxResultGenerator(DashboardLogic.Autocomplete),"/>
      <RemoveLine DemendsOn="ExampleEntities" Path="Southwind.Load\UserAssets.xml" From="&lt;UserChart Guid=&quot;d681b3f5-a3a9-4228-93e9-e856f45d911a&quot; DisplayName=&quot;Evolution By Employee&quot; Query=&quot;Order&quot; Owner=&quot;User;2&quot; ChartScript=&quot;StackedLines&quot; GroupResults=&quot;true&quot;>"  To="&lt;/Dashboard>"/>
      <RemoveLine DemendsOn="ExampleEntities" Path="Southwind.Load\UserAssets.xml" Line="&lt;ToolbarElement Type=&quot;Link&quot; IconName=&quot;fa fa-dashboard&quot; IconColor=&quot;blue&quot; Content=&quot;7914fa80-dfd6-42a2-b29a-18e8cc5851f8&quot; />" />
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="DashboardClient.Start();"/>
      <RemoveLine Path="Southwind.Windows\Main.xaml" Line="&lt;swdb:DashboardView />"/>
    </Module>

    <Module Name="Toolbar">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="ToolbarLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="ToolbarServer.Start(config);"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" 
                  From="import * as ToolbarClient from &quot;../../Extensions/Signum.React.Extensions/Toolbar/ToolbarClient&quot;" 
                  To="import QueryToolbarConfig from &quot;../../Extensions/Signum.React.Extensions/Toolbar/QueryToolbarConfig&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx"
                 From="ToolbarClient.start({ routes },"
                 To=");"/>
      <RemoveLine DependsOn="UserQuery" Path="Southwind.React\App\Main.tsx" Line="import UserQueryToolbarConfig from &quot;../../Extensions/Signum.React.Extensions/UserQueries/UserQueryToolbarConfig&quot;"/>
      <RemoveLine DependsOn="Chart" Path="Southwind.React\App\Main.tsx" Line="import UserChartToolbarConfig from &quot;../../Extensions/Signum.React.Extensions/Chart/UserChartToolbarConfig&quot;"/>
      <RemoveLine DependsOn="Dashboard" Path="Southwind.React\App\Main.tsx" Line="import DashboardToolbarConfig from &quot;../../Extensions/Signum.React.Extensions/Dashboard/DashboardToolbarConfig&quot;"/>
      <RemoveLine DependsOn="UserQuery" Path="Southwind.React\App\Main.tsx" Line="new UserQueryToolbarConfig(),"/>
      <RemoveLine DependsOn="Chart" Path="Southwind.React\App\Main.tsx" Line="new UserChartToolbarConfig(),"/>
      <RemoveLine DependsOn="Dashboard" Path="Southwind.React\App\Main.tsx" Line="new DashboardToolbarConfig(),"/>
      <RemoveSpanInLines Path="Southwind.React\App\Layout.tsx" Span="; sideMenuVisible: boolean"/>
      <RemoveSpanInLines Path="Southwind.React\App\Layout.tsx" Span=", sideMenuVisible: true"/>
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="onToggle={(visible: boolean) => this.setState({ sideMenuVisible: visible })}"/>
      <RemoveLine Path="Southwind.React\App\Layout.tsx" From="&lt;SidebarContainer" To="&lt;/SidebarContainer>"/>
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="{/* Layout"/>
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="Layout */}"/>
      <RemoveLine DemendsOn="ExampleEntities" Path="Southwind.Load\UserAssets.xml" From="&lt;ToolbarMenu Guid=&quot;fd577065-f887-4567-8da3-9d5bcc1cedfd&quot; Name=&quot;Products&quot;>" To="&lt;/ToolbarMenu>" />
      <RemoveLine DemendsOn="ExampleEntities" Path="Southwind.Load\UserAssets.xml" From="&lt;ToolbarMenu Guid=&quot;8b7e4ac5-cf45-41cb-8cff-4ce04506e12f&quot; Name=&quot;Employee&quot;>" To="&lt;/ToolbarMenu>" />
      <RemoveLine Path="Southwind.Load\UserAssets.xml" From="&lt;ToolbarMenu Guid=&quot;2deb71ea-f065-4fe3-9215-90460bc2d5ec&quot; Name=&quot;Reports&quot;>" To="&lt;/Toolbar>" />
      
    </Module>

    <Module Name="Process">
      <RemoveLine Path="Southwind.Entities\Order.cs" Line="public static ConstructSymbol&lt;ProcessEntity&gt;.FromMany&lt;OrderEntity&gt; CancelWithProcess;"/>
      <RemoveLine Path="Southwind.Entities\Order.cs" From="[AutoInit]//OrderProcess" To="}"/>
      <RemoveLine Path="Southwind.Logic\OrderLogic.cs" Line="ProcessLogic.Register(OrderProcess.CancelOrders, new CancelOrderAlgorithm());"/>
      <RemoveLine Path="Southwind.Logic\OrderLogic.cs" From="public class CancelOrderAlgorithm : PackageExecuteAlgorithm&lt;OrderEntity&gt;" To="} //CancelOrderAlgorithm"/>
      <RemoveLine Path="Southwind.Logic\OrderLogic.cs" From="new Graph&lt;ProcessEntity&gt;.ConstructFromMany&lt;OrderEntity&gt;(OrderOperation.CancelWithProcess)" To="}.Register();"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="sb.Schema.Settings.FieldAttributes((ProcessEntity cp) => cp.Data).Replace(new ImplementedByAttribute(typeof(PackageEntity), typeof(PackageOperationEntity)));"
                  To="sb.Schema.Settings.FieldAttributes((ProcessEntity s) => s.User).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="ProcessLogic.Start(sb, dqm);"
                  To="PackageLogic.Start(sb, dqm, packages: true, packageOperations: true);"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as ProcessClient from &quot;../../Extensions/Signum.React.Extensions/Processes/ProcessClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="ProcessClient.start({ routes, packages: true, packageOperations: true });"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="ProcessRunnerLogic.StartRunningProcesses(5 * 1000);"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="ProcessServer.Start(config);"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="ProcessClient.Start(package: true, packageOperation: true);"/>
    </Module>

    <Module Name="Scheduler" DependsOn="Process">
      <RemoveLine Path="Southwind.Entities\Order.cs" From="[AutoInit]//OrderTask" To="}"/>
      <RemoveLine Path="Southwind.Logic\OrderLogic.cs" From="SimpleTaskLogic.Register(OrderTask.CancelOldOrdersWithProcess, ctx =>" To="});//CancelOldOrdersProcess"/>

      <RemoveLine Path="Southwind.Logic\Starter.cs"
                  From="sb.Schema.Settings.FieldAttributes((ScheduledTaskEntity a) => a.User).Replace(new ImplementedByAttribute(typeof(UserEntity)));"
                  To="sb.Schema.Settings.FieldAttributes((ScheduledTaskLogEntity a) => a.User).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="SchedulerLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="SchedulerServer.Start(config);"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="SchedulerLogic.StartScheduledTasks();"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as SchedulerClient from &quot;../../Extensions/Signum.React.Extensions/Scheduler/SchedulerClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="SchedulerClient.start({ routes });"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="SchedulerClient.Start();"/>
    </Module>

    <Module Name="Mailing">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((EmailMessageEntity em) => em.From.EmailOwner).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((EmailMessageEntity em) => em.Recipients.First().EmailOwner).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((SmtpConfigurationEntity sc) => sc.DefaultFrom.EmailOwner).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((SmtpConfigurationEntity sc) => sc.AdditionalRecipients.First().EmailOwner).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="SmtpConfigurationLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="EmailLogic.Start(sb, dqm, () => Configuration.Value.Email, et => Configuration.Value.SmtpConfiguration);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="s.Email.SendEmails," To="s.Email.UrlLeft"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="AsyncEmailSenderLogic.StartRunningEmailSenderAsync(5 * 1000);" />
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="MailingServer.Start(config);" />
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as MailingClient from &quot;../../Extensions/Signum.React.Extensions/Mailing/MailingClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="MailingClient.start({ routes, smtpConfig: true, newsletter: false, pop3Config: false, sendEmailTask: false, contextual: true, queryButton: true, quickLinksFrom: undefined });"/>
      <RemoveLine Path="Southwind.Entities\ApplicationConfiguration.cs" From="[NotNullable]/*Email*/" To="public EmailConfigurationEmbedded Email { get; set; }"/>
      <RemoveLine Path="Southwind.Entities\ApplicationConfiguration.cs" From="[NotNullValidator]/*Smtp*/" To="public SmtpConfigurationEntity SmtpConfiguration { get; set; }"/>
      <RemoveLine Path="Southwind.React\App\Southwind\Templates\ApplicationConfiguration.tsx" From="&lt;Tab eventKey=&quot;tab&quot; title={ctx.niceName(a => a.email) }>" To="&lt;/Tab>"/>
      <RemoveLine Path="Southwind.Load\SouthwindMigrations.cs" From="Email = new EmailConfigurationEmbedded" To="}, //Email"/>
    </Module>

    <Module Name="SMS">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="SMSLogic.Start(sb, dqm, null, () => Configuration.Value.Sms);" />
      <RemoveLine Path="Southwind.Logic\Starter.cs" DependsOn="ExampleEntities"
                  From="SMSLogic.RegisterPhoneNumberProvider&lt;PersonEntity>(p => p.Phone, p => null);"
                  To="SMSLogic.RegisterPhoneNumberProvider&lt;CompanyEntity&gt;(p => p.Phone, p => null);"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="SMSClient.Start();" />
      <RemoveLine Path="Southwind.Entities\ApplicationConfiguration.cs" From="[NotNullable]/*Sms*/" To="public SMSConfigurationEmbedded Sms { get; set; }"/>
      <RemoveLine Path="Southwind.React\App\Southwind\Templates\ApplicationConfiguration.tsx" From="&lt;Tab eventKey=&quot;sms&quot; title={ctx.niceName(a => a.sms) }>" To="&lt;/Tab>"/>
      <RemoveLine Path="Southwind.Load\SouthwindMigrations.cs" From="Sms = new SMSConfigurationEmbedded" To="}, //Sms"/>
    </Module>

    <Module Name="Auth">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="AuthLogic.Start(sb, dqm, &quot;System&quot;, null);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="AuthLogic.StartAllModules(sb, dqm);"/>
      <RemoveSpanInLines Path="Southwind.Logic\Starter.cs" Span="typeof(UserEntity),"/>
      <RemoveSpanInLines Path="Southwind.Logic\Starter.cs" Span="typeof(UserEntity)"/>
      <RemoveSpanInLines Path="Southwind.Logic\Starter.cs" Span="typeof(RoleEntity)"/>
      <RemoveLine Path="Southwind.Entities\ApplicationConfiguration.cs" From="[NotNullable]/*AuthTokens*/" To="public AuthTokenConfigurationEmbedded AuthTokens { get; set; }"/>
      <RemoveLine Path="Southwind.React\App\Southwind\Templates\ApplicationConfiguration.tsx" From="&lt;Tab eventKey=&quot;auth&quot; title={ctx.niceName(a => a.authTokens) }>" To="&lt;/Tab>"/>
      <RemoveLine Path="Southwind.Load\SouthwindMigrations.cs" From="AuthTokens = new AuthTokenConfigurationEmbedded" To="}, //Auth"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="AuthServer.Start(config, () => Starter.Configuration.Value.AuthTokens, &quot;IMPORTANT SECRET FROM Southwind. CHANGE THIS STRING!!!&quot;);" />
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" From="AuthClient.Start(" To="defaultPasswordExpiresLogic: false);" />
      <RemoveLine Path="Southwind.Load\Program.cs" Line="{43, AuthLogic.ImportExportAuthRules},"/>
      <RemoveLine Path="Southwind.Load\SouthwindMigrations.cs" Line="EmployeeLoader.CreateUsers," DependsOn="Migrations,LoadNorthwind"/>
      <RemoveLine Path="Southwind.Load\SouthwindMigrations.cs" From="CreateRoles," To="CreateSystemUser,"/>
      <RemoveLine Path="Southwind.Load\EmployeeLoader.cs" From="internal static void CreateUsers()" To="} //CreateUsers"/>
      <RemoveLine Path="Southwind.Load\SouthwindMigrations.cs" From="internal static void CreateRoles()" To="} //CreateSystemUser"/>
      <RemoveLine Path="Southwind.Load\AuthRules.xml" From="&lt;Types>" To="&lt;/Types>"  DependsOn="ExampleEntities"/>
      <RemoveFiles Path="Southwind.Entities\UserEmployeeMixin.cs" DependsOn="ExampleEntities"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="MixinDeclarations.Register&lt;UserEntity, UserEmployeeMixin&gt;();" DependsOn="ExampleEntities"/>
      <RemoveLine Path="Southwind.React\ServerSouthwind.svc.cs" From="public override void Login(string username, byte[] passwordHash)" To="} //Login" DependsOn="ExampleEntities"/>
      <RemoveLine Path="Southwind.React\App\Southwind\SouthwindClient.tsx"
                 From="Navigator.getSettings(UserEntity)!.overrideView((rep) => {"
                 To="});"
                 DependsOn="ExampleEntities"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" From="Navigator.EntitySettings&lt;UserEntity&gt;().OverrideView += (usr, ctrl) =>" To="};" DependsOn="ExampleEntities"/>
      <RemoveSpanInLines Path="Southwind.Entities\Employee.cs" Span="get { return UserEntity.Current.Mixin&lt;UserEmployeeMixin>().Employee; } //" DependsOn="ExampleEntities" />>
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="AuthClient.onCurrentUserChanged.push(this.handleResetUI);" />
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="AuthClient.onCurrentUserChanged.remove(this.handleResetUI);" />
      <RemoveSpanInLines Path="Southwind.React\App\Layout.tsx" Span="AuthClient.currentUser() &amp;&amp;" />
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="&lt;LoginUserControl />"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as AuthClient from &quot;../../Extensions/Signum.React.Extensions/Authorization/AuthClient&quot;"/>
      <RemoveSpanInLines Path="Southwind.React\App\Main.tsx" Span="AuthClient.autoLogin() //"/>
      <RemoveSpanInLines Path="Southwind.React\App\Main.tsx" Span="!!AuthClient.currentUser(); //"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="AuthClient.startPublic({ routes, userTicket: true, resetPassword: true });"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="AuthClient.start({ routes, types: true, properties: true, operations: true, queries: true, permissions: true });"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" From="AuthClient.Options.onLogin = () => {" To="};"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="static IServerSouthwind Login(IServerSouthwind result)" To="} //Login"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="if (Application.Current == null || Application.Current.CheckAccess())" To="});"/>
      <RemoveLine Path="Southwind.Windows\Main.xaml" Line="&lt;MenuItem Tag=&quot;{m:Explore QueryName={x:Type sea:UserEntity}}&quot;/>"/>
      <RemoveLine Path="Southwind.Windows\Main.xaml" Line="&lt;MenuItem Tag=&quot;{m:Explore QueryName={x:Type sea:RoleEntity}}&quot;/>"/>
      <RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" From="internal static void LoadUsers()" To="}//LoadUsers"/>
      <RemoveLine Path="Southwind.Test.Environment\SouthwindEnvironment.cs" Line="user.SetMixin((UserEmployeeMixin e) => e.Employee, Database.Query&lt;EmployeeEntity>().Single(e => e.FirstName == userName).ToLite());" DependsOn="ExampleEntities"/>
      <RemoveLine Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="SouthwindEnvironment.LoadUsers();"/>
      <RemoveLine Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="var authRules = XDocument.Load(@&quot;D:\Signum\Southwind\Southwind.Load\AuthRules.xml&quot;); //Change this route if necessary. Only god knows where MSTest is running."/>
      <RemoveLine Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="AuthLogic.LoadRoles(authRules);"/>
      <RemoveLine Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="AuthLogic.ImportRulesScript(authRules, interactive: false).PlainSqlCommand().ExecuteLeaves();"/>
    </Module>

    <Module Name="Translation">
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="TranslationLogic.Start(sb, dqm, countLocalizationHits: false);" To="TranslatedInstanceLogic.Start(sb, dqm, () => CultureInfo.GetCultureInfo(&quot;en&quot;));"/>
      <RemoveFiles Path="Southwind.Entities\Translations" DependsOn="ExampleEntities" />
      <RemoveFiles Path="Southwind.React\Service References" />
      <RemoveFiles Path="Southwind.React\Translations" />
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="TranslationServer.Start(config, new AlreadyTranslatedTranslator(new AzureTranslator(&quot;Your API Key for Azure Translate&quot;)));" />
      <RemoveLine Path="Southwind.React\Global.asax.cs" From="SignumAuthenticationFilterAttribute.GetCurrentCultures = (ac) => GetCulture(ac.Request);" To="return DefaultCulture; //Translation" />
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as TranslationClient from &quot;../../Extensions/Signum.React.Extensions/Translation/TranslationClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="TranslationClient.start({ routes });"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as CultureClient from &quot;../../Extensions/Signum.React.Extensions/Translation/CultureClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line=".then(() => CultureClient.loadCurrentCulture())"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="CultureClient.onCultureLoaded.push(ci => {"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="}); //Culture"/>
      <RemoveSpanInLines Path="Southwind.React\App\Main.tsx" Span="ci.name!; //"/>
      <RemoveLine Path="Southwind.Load\SouthwindMigrations.cs" Line="ImportSpanishInstanceTranslations," DependsOn="LoadNorthwind,Migrations"/>
      <RemoveLine Path="Southwind.Load\SouthwindMigrations.cs" From="public static void ImportSpanishInstanceTranslations()" To="}" DependsOn="LoadNorthwind"/>
      <RemoveFiles Path="Southwind.Load\Category.es.View.xlsx" DependsOn="LoadNorthwind"/>
      <RemoveLine Path="Southwind.Entities\Product.cs" Line="[TranslateField] //Localize categoryName column" DependsOn="ExampleEntities"/>
      <RemoveLine Path="Southwind.Entities\Product.cs" Line="[TranslateField] //Localize description column" DependsOn="ExampleEntities"/>
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="&lt;CultureDropdown />"/>
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="CultureClient.onCultureLoaded.push(this.handleResetUI);" />
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="CultureClient.onCultureLoaded.remove(this.handleResetUI);" />
    </Module>

    <Module Name="Auth_ResetPasswordRequest" DependsOn="Auth,Mailing">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="ResetPasswordRequestLogic.Start(sb, dqm);"/>
    </Module>

    <Module Name="Auth_UserTicket" DependsOn="Auth">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserTicketLogic.Start(sb, dqm);"/>
    </Module>

    <Module Name="SessionLog" DependsOn="Auth">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="SessionLogLogic.Start(sb, dqm);"/>
    </Module>

    <Module Name="Alerts">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="AlertLogic.Start(sb, dqm, typeof(UserEntity), /*Alert*/typeof(OrderEntity));"/>
      <RemoveSpanInLines Path="Southwind.Logic\Starter.cs" Span=", /*Alert*/typeof(OrderEntity)" DependsOn="ExampleEntities" />
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((AlertEntity a) => a.CreatedBy).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((AlertEntity a) => a.AttendedBy).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="AlertClient.Start(typeof(UserEntity), /*Alert*/typeof(OrderEntity));"/>
      <RemoveSpanInLines Path="Southwind.Windows\App.xaml.cs" Span=", /*Alert*/typeof(OrderEntity)" DependsOn="ExampleEntities"/>
    </Module>

    <Module Name="Notes">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="NoteLogic.Start(sb, dqm, typeof(UserEntity), /*Note*/typeof(OrderEntity));"/>
      <RemoveSpanInLines Path="Southwind.Logic\Starter.cs" Span=", /*Note*/typeof(OrderEntity)" DependsOn="ExampleEntities" />
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.FieldAttributes((NoteEntity n) => n.CreatedBy).Replace(new ImplementedByAttribute(typeof(UserEntity)));"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="NoteClient.Start(typeof(UserEntity), /*Note*/typeof(OrderEntity));"/>
      <RemoveSpanInLines Path="Southwind.Windows\App.xaml.cs" Span=", /*Note*/typeof(OrderEntity)" DependsOn="ExampleEntities" />

    </Module>

    <Module Name="Cache">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="CacheLogic.Start(sb);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="SetupCache(sb);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="private static void SetupCache(SchemaBuilder sb)" To="}"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="CacheClient.start({ routes });"/>
    </Module>

    <Module Name="SplitDB">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="string logDatabase = Connector.TryExtractDatabaseNameWithPostfix(ref connectionString, &quot;_Log&quot;);"/>
      <RemoveSpanInLines Path="Southwind.Logic\Starter.cs" Span="LogDatabaseName = logDatabase"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="public string LogDatabaseName;"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="public Type[] InLogDatabase = new Type[]" To="};"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="if (this.LogDatabaseName == null)" To="return new DatabaseName(null, this.LogDatabaseName);"/>
    </Module>

    <Module Name="PublicCatalog" DependsOn="ExampleEntities,Translation,Cache,Files">
      <RemoveLine Path="Southwind.Logic\ProductLogic.cs" Line="public static ResetLazy&lt;Dictionary&lt;CategoryEntity, List&lt;ProductEntity&gt;&gt;&gt; ActiveProducts;"/>
      <RemoveLine Path="Southwind.Logic\ProductLogic.cs" From="ActiveProducts = sb.GlobalLazy(() =>" To="new InvalidateWith(typeof(ProductEntity)));"/>
      <RemoveFiles Path="Southwind.React\App\PublicCatalog.tsx"/>
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="&lt;LinkContainer to=&quot;~/publicCatalog&quot;>&lt;MenuItem>Catalog&lt;/MenuItem>&lt;/LinkContainer>"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="routes.push(&lt;Route path=&quot;~/publicCatalog&quot; component={PublicCatalog} />);"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import PublicCatalog from './PublicCatalog'"/>
      <RemoveLine Path="Southwind.React\App\Home.tsx" From="if (Navigator.currentUser == null) {" To="}//PublicCatalog"/>
      <RemoveFiles Path="Southwind.React\App\Southwind\CatalogController.cs"/>
    </Module>

    <Module Name="Profiler">
      <RemoveLine Path="Southwind.React\ServerSouthwind.svc.cs" From="string longDescription = mi.Name + description == null ? null : (&quot; &quot; + description);" To="using (HeavyProfiler.Log(&quot;WCF&quot;, () => longDescription))"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="ProfilerLogic.Start(sb, dqm," To="overrideSessionTimeout: true);"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as ProfilerClient from &quot;../../Extensions/Signum.React.Extensions/Profiler/ProfilerClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="ProfilerClient.start({ routes });"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="ProfilerServer.Start(config);"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="ProfilerClient.Start();"/>
    </Module>

    <Module Name="Omnibox">
      <RemoveLine Path="Southwind.React\Global.asax.cs" From="OmniboxServer.Start(config," To=");//Omnibox"/>
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="&lt;OmniboxAutocomplete inputAttrs={{ className: &quot;form-control&quot; }} />"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as OmniboxClient from &quot;../../Extensions/Signum.React.Extensions/Omnibox/OmniboxClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import DynamicQueryOmniboxProvider from &quot;../../Extensions/Signum.React.Extensions/Omnibox/DynamicQueryOmniboxProvider&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import EntityOmniboxProvider from &quot;../../Extensions/Signum.React.Extensions/Omnibox/EntityOmniboxProvider&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import SpecialOmniboxProvider from &quot;../../Extensions/Signum.React.Extensions/Omnibox/SpecialOmniboxProvider&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" From="OmniboxClient.start(" To=");//Omnibox"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" From="OmniboxClient.Start();" To="OmniboxClient.Register(new DashboardOmniboxProvider());"/>
      <RemoveLine Path="Southwind.Windows\Main.xaml" Line="&lt;swo:OmniboxAutocomplete MinWidth=&quot;200&quot; DockPanel.Dock=&quot;Right&quot;/>"/>
    </Module>

    <Module Name="Map">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="MapLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="MapServer.Start(config);"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as MapClient from &quot;../../Extensions/Signum.React.Extensions/Map/MapClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="MapClient.start({ routes, auth: true, cache: true, disconnected: true, isolation: false });"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\App\Main.tsx" Line="import MapOmniboxProvider from &quot;../../Extensions/Signum.React.Extensions/Map/MapOmniboxProvider&quot;"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\App\Main.tsx" Line="new MapOmniboxProvider(),"/>
      <RemoveLine DependsOn="Omnibox" Path="Southwind.React\Global.asax.cs" Line="new MapOmniboxResultGenerator(type => OperationLogic.TypeOperations(type).Any()),"/>
    </Module>

    <Module Name="Help">
      <RemoveLine Path="Southwind.Load\Program.cs" Line="{45, HelpXml.ImportExportHelp},"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="HelpLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="HelpClient.Start(); "/>
    </Module>

    <Module Name="Dynamic">
      <RemoveLine Path="Southwind.Load\Southwind.Load.csproj" From="&lt;Target Name=&quot;CopyRoslynFiles&quot; AfterTargets=&quot;AfterBuild&quot; Condition=&quot;true&quot;>" To="&lt;/Target>"/>
      <RemoveFiles Path="Southwind.Logic\DynamicLogicStarter.cs" />
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="StartParameters.IgnoredDatabaseMismatches = new List&lt;Exception>();"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="StartParameters.IgnoredCodeErrors = new List&lt;Exception>();"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="DynamicLogicStarter.Start(sb, dqm);" To="DynamicLogic.BeforeSchema(sb);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="DynamicLogic.StartDynamicModules(sb, dqm);" To="Starter.DynamicDisconnectedStrategis(sb);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="if (type.Namespace == DynamicCode.CodeGenEntitiesNamespace)" To="return &quot;codegen&quot;;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" 
                  From="import * as DynamicClient from &quot;../../Extensions/Signum.React.Extensions/Dynamic/DynamicClient&quot;"
                  To="import * as DynamicViewClient from &quot;../../Extensions/Signum.React.Extensions/Dynamic/DynamicViewClient&quot;"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx"
                  From="DynamicClient.start({ routes });"
                  To="DynamicViewClient.start({ routes });"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" From="using Signum.React.Dynamic;" To="using Signum.Entities.Dynamic;"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="DynamicCode.CodeGenDirectory = Server.MapPath(&quot;~/CodeGen&quot;);"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="DynamicServer.Start(config);"/>
    </Module>

    <Module Name="Workflow">
      <RemoveLine Path="Southwind.Entities\ApplicationConfiguration.cs" From="[NotNullable]/*Workflow*/" To="public WorkflowConfigurationEmbedded Workflow { get; set; }"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="WorkflowLogicStarter.Start(sb, dqm, () => Starter.Configuration.Value.Workflow);"/>
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="import * as WorkflowClient from &quot;../../Extensions/Signum.React.Extensions/Workflow/WorkflowClient&quot;" />
      <RemoveLine Path="Southwind.React\App\Main.tsx" Line="WorkflowClient.start({ routes });"/>
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="import WorkflowDropdown from &quot;../../Extensions/Signum.React.Extensions/Workflow/Workflow/WorkflowDropdown&quot;"/>
      <RemoveLine Path="Southwind.React\App\Layout.tsx" Line="&lt;WorkflowDropdown />"/>
      <RemoveLine Path="Southwind.React\Global.asax.cs" Line="WorkflowServer.Start(config);"/>
      <RemoveLine Path="Southwind.Load\SouthwindMigrations.cs" From="Workflow= new WorkflowConfigurationEmbedded" To="}, //Workflow"/>
      <RemoveLine Path="Southwind.React\package.json" Line="&quot;bpmn-js&quot;: &quot;^0.21.0&quot;,"/>
    </Module>

    <Module Name="Test.Environment">
      <RemoveFiles Path="Southwind.Test.Environment"/>

      <RemoveLine DependsOn="ExampleEntities"  Path="Southwind.Test.Environment\SouthwindEnvironment.cs"
                  From="internal static void LoadEmployees()"
                  To="} //LoadEmployees" />
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Environment\SouthwindEnvironment.cs"
                   From="internal static void LoadProducts()"
                   To="}//LoadShippers" />
      <RemoveFiles DependsOn="ExampleEntities" Path="Southwind.Test.Environment\SouthwindExtensions.cs" />
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="SouthwindEnvironment.LoadEmployees();"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="SouthwindEnvironment.LoadProducts();"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="SouthwindEnvironment.LoadCustomers();"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Environment\EnvironmentTest.cs" Line="SouthwindEnvironment.LoadShippers();"/>
    </Module>

    <Module Name="Test.Logic" DependsOn="Test.Environment">
      <RemoveFiles Path="Southwind.Test.Logic"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Logic\OrderTest.cs" From="[TestMethod]" To="}//OrderTestExample"/>
    </Module>

    <Module Name="Test.Windows" DependsOn="Test.Environment, Windows">
      <RemoveFiles Path="Southwind.Test.Windows"/>

      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Windows\Common.cs"
            From="public static DetailGridProxy DetailGrid(this ILineContainer&lt;OrderEntity> container)"
            To="}//DetailGrid"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Windows\Common.cs" From="public class DetailGridProxy" To="}//DetailGridRowProxy"/>
      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.Windows\OrderWindowTest.cs" From="[TestMethod]" To="}//OrderWindowsTestExample"/>
    </Module>

    <Module Name="Test.React" DependsOn="Test.Environment">
      <RemoveFiles Path="Southwind.Test.React"/>

      <RemoveLine DependsOn="ExampleEntities" Path="Southwind.Test.React\OrderReactTest.cs" From="[TestMethod]" To="}//OrderReactTestExample"/>
    </Module>
  </Modules>

  <Projects>
    <Project Path ="Southwind.Entities\Southwind.Entities.csproj"/>
    <Project Path ="Southwind.Load\Southwind.Load.csproj"/>
    <Project Path ="Southwind.Local\Southwind.Local.csproj"/>
    <Project Path ="Southwind.Logic\Southwind.Logic.csproj"/>
    <Project Path ="Southwind.React\Southwind.React.csproj"/>
    <Project Path ="Southwind.Windows\Southwind.Windows.csproj"/>
    <Project Path ="Southwind.Test.Environment\Southwind.Test.Environment.csproj"/>
    <Project Path ="Southwind.Test.Logic\Southwind.Test.Logic.csproj"/>
    <Project Path ="Southwind.Test.React\Southwind.Test.React.csproj"/>
    <Project Path ="Southwind.Test.Windows\Southwind.Test.Windows.csproj"/>
  </Projects>

  <Solutions>
    <Solution Path="Southwind.sln" />
  </Solutions>
</File>
