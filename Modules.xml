<?xml version="1.0" encoding="utf-8"?>
<File>
  <Modules>
    <Module Name="Windows">
      <RemoveFiles Path="Southwind.Windows"/>
      <RemoveFiles Path="Southwind.Entities\IServerSouthwind.cs"/>
      <RemoveFiles Path="Southwind.Web\ServerSouthwind.svc"/>
      <RemoveFiles Path="Southwind.Web\ServerSouthwind.svc.cs"/>
      <RemoveLine Path="Southwind.Web\Web.config" From="&lt;system.serviceModel&gt;" To="&lt;/system.diagnostics&gt;--&gt;"/>
    </Module>

    <Module Name="Web">
      <RemoveFiles Path="Southwind.Web\Code\SouthwindClient.cs"/>
      <RemoveFiles Path="Southwind.Web\Scripts\Order.ts"/>
      <RemoveFiles Path="Southwind.Web\Views\Southwind"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="private static void SetupCache(SchemaBuilder sb)" To="}"/>
      <RemoveLine Path="Southwind.Web\Views\Shared\Menu.cshtml" From="new WebMenuItem //Southwind" To="}, //Southwind"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="SouthwindClient.Start();"/>
    </Module>

    <Module Name="Disconnected" DependsOn="Windows">
      <RemoveFiles Path="Southwind.Local"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="DisconnectedLogic.Start(sb, dqm);" To="DisconnectedLogic.DatabaseFolder = @&quot;D:\SouthwindTemp\Database&quot;;"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="SetupDisconnectedStrategies(sb);"/>
      <RemoveFiles Path="Southwind.Logic\Starter.Disconnected.cs"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="DisconnectedClient.Start();"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" Line="using Southwind.Local;"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="public enum StartOption" To="}"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="if (RunLocally())" To="else //Run remotely"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="if (!Server.OfflineMode)" To="}"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="if (Server.OfflineMode)" To="LocalServer.Stop();"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="private static bool RunLocally()" To="}//RunLocally"/>
      <RemoveLine Path="Southwind.Windows\Program.cs" From="private static void UploadIfNecessary()" To="}//UploadIfNecessary"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="using Southwind.Local;"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="DisconnectedClient.Start();"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" From="if (Server.OfflineMode)" To="}//OfflineMode"/>
      <RemoveLine Path="Southwind.Entities\Order.cs" Line="[Mixin(typeof(DisconnectedMixin))]"/>
      <RemoveFiles Path="Southwind.Web\ServerSouthwindTransfer.svc"/>
      <RemoveFiles Path="Southwind.Web\ServerSouthwindTransfer.svc.cs"/>
      <RemoveLine Path="Southwind.Web\Web.config" From="&lt;basicHttpBinding&gt;" To="&lt;/basicHttpBinding&gt;"/>
      <RemoveLine Path="Southwind.Web\Web.config" From="&lt;service name=&quot;Southwind.Web.ServerSouthwindTransfer&quot; behaviorConfiguration=&quot;TransferBehavior&quot;&gt;" To="&lt;/service&gt;"/>
      <RemoveLine Path="Southwind.Web\Web.config" From="&lt;behavior name=&quot;TransferBehavior&quot;&gt;" To="&lt;/behavior&gt;"/>
    </Module>

    <Module Name="LoadNorthwind">	  
	  <RemoveLine Path="Southwind.Load\Program.cs"
	    From="{0, EmployeeLoader.LoadRegions}," 
	    To="{30, OrderLoader.UpdateOrdersDate },"/>
      <RemoveFiles Path="Southwind.Load\CustomerLoader.cs"/>
      <RemoveFiles Path="Southwind.Load\EmployeeLoader.cs"/>
      <RemoveFiles Path="Southwind.Load\Northwind.dbml"/>
      <RemoveFiles Path="Southwind.Load\Northwind.dbml.layout"/>
      <RemoveFiles Path="Southwind.Load\Northwind.designer.cs"/>
      <RemoveFiles Path="Southwind.Load\NorthwindPartials.cs"/>
      <RemoveFiles Path="Southwind.Load\OrderLoader.cs"/>
      <RemoveFiles Path="Southwind.Load\ProductLoader.cs"/>
      <RemoveFiles Path="Southwind.Load\SupplierFaxes.csv"/>
    </Module>

    <Module Name="UserQuery">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.OverrideAttributes((UserQueryDN uq) => uq.Owner, new ImplementedByAttribute(typeof(UserDN), typeof(RoleDN)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserQueryLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserQueryLogic.RegisterUserTypeCondition(sb, SouthwindGroup.UserEntities);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserQueryLogic.RegisterRoleTypeCondition(sb, SouthwindGroup.RoleEntities);"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="UserQueriesClient.Start();"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="UserQueryClient.Start();"/>
    </Module>

    <Module Name="Chart" DependsOn="Files">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.OverrideAttributes((UserChartDN uc) => uc.Owner, new ImplementedByAttribute(typeof(UserDN), typeof(RoleDN)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="ChartLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserChartLogic.RegisterUserTypeCondition(sb, SouthwindGroup.UserEntities);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserChartLogic.RegisterRoleTypeCondition(sb, SouthwindGroup.RoleEntities);"/>
      <RemoveFiles Path="Southwind.Web\Libs\CodeMirror\"/>
      <RemoveFiles Path="Southwind.Web\Libs\d3.v3.min.js"/>
      <RemoveFiles Path="Southwind.Web\Libs\colorbrewer.js"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="ChartClient.Start();"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="ChartClient.Start();"/>
    </Module>

    <Module Name="Files" >
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="FilePathLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" From="FilesClient.Start(" To="embeddedFile: true);"/>
      <RemoveLine Path="Southwind.Entities\Employee.cs" From="Lite&lt;FileDN&gt; photo;" To="}"/>
      <RemoveLine Path="Southwind.Entities\Product.cs" From="EmbeddedFileDN picture;" To="}"/>
      <RemoveLine Path="Southwind.Load\EmployeeLoader.cs" Line="Photo = new FileDN { FileName = e.PhotoPath.AfterLast('/'), BinaryFile = RemoveOlePrefix(e.Photo.ToArray()) }.ToLiteFat(),"/>
      <RemoveLine Path="Southwind.Load\EmployeeLoader.cs" From="public static byte[] RemoveOlePrefix(byte[] bytes)" To="} //RemoveOlePrefix"/>
      <RemoveLine Path="Southwind.Load\ProductLoader.cs" Line="Picture = new EmbeddedFileDN { FileName = s.CategoryName + &quot;.jpg=&quot;, BinaryFile = EmployeeLoader.RemoveOlePrefix(s.Picture.ToArray()) },"/>
      <RemoveLine Path="Southwind.Logic\ProductLogic.cs" Line="s.Picture"/>
      <RemoveLine Path="Southwind.Logic\EmployeeLogic.cs" Line="e.Photo,"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="FileLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Web\Code\SouthwindClient.cs" From="QuerySettings.RegisterPropertyFormat((CategoryDN e) => e.Picture," To=".Attr(&quot;style&quot;, &quot;width:48px&quot;).ToHtmlSelf()) { TextAlign = &quot;center&quot; });"/>
      <RemoveLine Path="Southwind.Web\Code\SouthwindClient.cs" From="public static string Base64Data(EmbeddedFileDN file)" To="} //Base64Data"/>
      <RemoveLine Path="Southwind.Web\Views\Southwind\Category.cshtml" From="@Html.FileLine(cc, a => a.Picture)" To="} //Picture"/>
      <RemoveLine Path="Southwind.Web\Views\Southwind\Employee.cshtml" From="@Html.FileLine(ec, a => a.Photo.Try(p => p.Retrieve()))" To="} //Photo"/>
      <RemoveLine Path="Southwind.Windows\Code\SouthwindClient.cs" From="QuerySettings.RegisterPropertyFormat((EmployeeDN e) => e.Photo, b =>" To="}); //Picture"/>
      <RemoveLine Path="Southwind.Windows\Controls\Category.xaml" From="&lt;f:FileLine m:Common.Route=&quot;Picture&quot; />" To="&lt;/Border>"/>
      <RemoveLine Path="Southwind.Windows\Controls\Employee.xaml" From="&lt;StackPanel  Grid.Column=&quot;1&quot; Grid.Row=&quot;0&quot;>" To="&lt;/StackPanel>"/>
      <RemoveFiles Path="Southwind.Windows\SouthwindConverters.cs"/>
    </Module>

    <Module Name="Excel">
      <RemoveLine Path="Southwind.Web\Global.asax.cs" From="ExcelClient.Start(" To="excelReport: false);"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="ExcelClient.Start(toExcel: true, excelReport: false);"/>
    </Module>

    <Module Name="Dashboard">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.OverrideAttributes((DashboardDN cp) => cp.Owner, new ImplementedByAttribute(typeof(UserDN), typeof(RoleDN)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="DashboardLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="DashboardLogic.RegisterUserTypeCondition(sb, SouthwindGroup.UserEntities);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="DashboardLogic.RegisterRoleTypeCondition(sb, SouthwindGroup.RoleEntities);"/>
      <RemoveLine Path="Southwind.Web\Controllers\HomeController.cs" From="var panel = DashboardLogic.GetHomePageDashboard();" To="return View(DashboardClient.ViewPrefix.Formato(&quot;Dashboard&quot;), panel);"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="DashboardClient.Start();"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="DashboardClient.Start();"/>
    </Module>

    <Module Name="Process">
      <RemoveLine Path="Southwind.Entities\Order.cs" Line="public static readonly ConstructSymbol&lt;ProcessDN&gt;.FromMany&lt;OrderDN&gt; CancelWithProcess = OperationSymbol.Construct&lt;ProcessDN&gt;.FromMany&lt;OrderDN&gt;();"/>
      <RemoveLine Path="Southwind.Entities\Order.cs" From="public static class OrderProcess" To="}"/>
      <RemoveLine Path="Southwind.Logic\OrderLogic.cs" Line="ProcessLogic.Register(OrderProcess.CancelOrders, new CancelOrderAlgorithm());"/>
      <RemoveLine Path="Southwind.Logic\OrderLogic.cs" From="public class CancelOrderAlgorithm : PackageExecuteAlgorithm&lt;OrderDN&gt;" To="} //CancelOrderAlgorithm"/>
      <RemoveLine Path="Southwind.Logic\OrderLogic.cs" From="new Graph&lt;ProcessDN&gt;.ConstructFromMany&lt;OrderDN&gt;(OrderOperation.CancelWithProcess)" To="}.Register();"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="MixinDeclarations.Register&lt;ProcessDN, UserProcessSessionMixin&gt;();"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="sb.Schema.Settings.OverrideAttributes((ProcessDN cp) => cp.Data, new ImplementedByAttribute(typeof(PackageDN), typeof(PackageOperationDN)));"
                  To="sb.Schema.Settings.OverrideAttributes((ProcessDN s) => s.Mixin&lt;UserProcessSessionMixin&gt;().User, new ImplementedByAttribute(typeof(UserDN)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="ProcessLogic.Start(sb, dqm, userProcessSession: true);"
                  To="PackageLogic.Start(sb, dqm, packages: true, packageOperations: true);"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="ProcessRunnerLogic.StartRunningProcesses(5 * 1000);"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" From="ProcessesClient.Start(" To="packageOperations: true);"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="ProcessClient.Start(package: true, packageOperation: true);"/>
    </Module>

    <Module Name="Scheduler" DependsOn="Process">
      <RemoveLine Path="Southwind.Entities\Order.cs" From="public static class OrderTasks" To="}"/>
      <RemoveLine Path="Southwind.Logic\OrderLogic.cs" From="SimpleTaskLogic.Register(OrderTasks.CancelOldOrdersWithProcess, () =>" To="});//CancelOldOrdersProcess"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.OverrideAttributes((ScheduledTaskLogDN a) => a.User, new ImplementedByAttribute(typeof(UserDN)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="SchedulerLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="ProcessRunnerLogic.StartRunningProcesses(5 * 1000);"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="SchedulerClient.Start(simpleTask: true);"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="SchedulerClient.Start();"/>
    </Module>

    <Module Name="Mailing">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.OverrideAttributes((EmailMessageDN em) => em.From.EmailOwner, new ImplementedByAttribute(typeof(UserDN)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.OverrideAttributes((EmailMessageDN em) => em.Recipients.First().EmailOwner, new ImplementedByAttribute(typeof(UserDN)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.OverrideAttributes((SmtpConfigurationDN sc) => sc.DefaultFrom.EmailOwner, new ImplementedByAttribute(typeof(UserDN)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.OverrideAttributes((SmtpConfigurationDN sc) => sc.AditionalRecipients.First().EmailOwner, new ImplementedByAttribute(typeof(UserDN)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="EmailLogic.Start(sb, dqm, () => Configuration.Value.Email);"/>
      <RemoveFiles Path="Southwind.Web\Libs\ckeditor"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" From="MailingClient.Start(" To="pop3Config: false);" />
    </Module>

    <Module Name="SMS">
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="SMSLogic.Start(sb, dqm, null, () => Configuration.Value.Sms);" To="SMSLogic.RegisterPhoneNumberProvider&lt;CompanyDN&gt;(p => p.Phone, p => null);"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="SMSClient.Start();" />
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="SMSClient.Start();" />
    </Module>

    <Module Name="Auth">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="AuthLogic.Start(sb, dqm, &quot;System&quot;, null);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="AuthLogic.StartAllModules(sb, dqm);"/>
      <RemoveSpanInLines Path="Southwind.Logic\Starter.cs" Span="typeof(UserDN), typeof(RoleDN)"/>
      <RemoveSpanInLines Path="Southwind.Logic\Starter.cs" Span="typeof(UserDN)"/>
      <RemoveSpanInLines Path="Southwind.Logic\Starter.cs" Span="typeof(RoleDN)"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" From="AuthClient.Start(" To="passwordExpiration: false);" />
      <RemoveLine Path="Southwind.Web\Global.asax.cs" From="AuthAdminClient.Start(" To="permissions: true);" />
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" From="AuthClient.Start(" To="defaultPasswordExpiresLogic: false);" />
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserQueryLogic.RegisterUserTypeCondition(sb, SouthwindGroup.UserEntities);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserQueryLogic.RegisterRoleTypeCondition(sb, SouthwindGroup.RoleEntities);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserChartLogic.RegisterUserTypeCondition(sb, SouthwindGroup.UserEntities);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserChartLogic.RegisterRoleTypeCondition(sb, SouthwindGroup.RoleEntities);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="DashboardLogic.RegisterUserTypeCondition(sb, SouthwindGroup.UserEntities);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="DashboardLogic.RegisterRoleTypeCondition(sb, SouthwindGroup.RoleEntities);"/>
      <RemoveLine Path="Southwind.Load\Program.cs" Line="{42, AuthLogic.ImportExportAuthRules},"/>
      <RemoveFiles Path="Southwind.Load\AuthRules.xml"/>
      
    </Module>

    <Module Name="Translation">
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="TranslationLogic.Start(sb, dqm);" To="TranslatedInstanceLogic.Start(sb, dqm, &quot;en&quot;);"/>
      <RemoveFiles Path="Southwind.Entities\Translations" />
      <RemoveFiles Path="Southwind.Web\Service References" />
      <RemoveFiles Path="Southwind.Web\Translations" />
      <RemoveLine Path="Southwind.Web\Global.asax.cs" From="TranslationClient.Start(new BingTranslator()," To="instanceTranslator: true);" />
      <RemoveLine Path="Southwind.Web\Global.asax.cs" From="Thread.CurrentThread.CurrentUICulture = Thread.CurrentThread.CurrentCulture = DefaultCulture;" To="} // BingTranslator" />
      <RemoveLine Path="Southwind\Southwind.Entities\Product.cs" From="[TranslateField]" />
    </Module>

    <Module Name="Auth_ResetPasswordRequest" DependsOn="Auth">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="ResetPasswordRequestLogic.Start(sb, dqm);"/>
    </Module>

    <Module Name="Auth_UserTicket" DependsOn="Auth">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="UserTicketLogic.Start(sb, dqm);"/>
    </Module>

    <Module Name="SessionLog" DependsOn="Auth">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="SessionLogLogic.Start(sb, dqm);"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="SessionLogClient.Start();"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="SessionLogClient.LogSessionEnd((UserDN)Session[UserHolder.UserSessionKey], TimeSpan.FromMinutes(Session.Timeout));"/>
    </Module>

    <Module Name="Auth_UserMixin" DepentdsOn="Auth">
      <RemoveFiles Path="Southwind.Entities\UserMixin.cs"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="MixinDeclarations.Register&lt;UserDN, UserMixin&gt;();"/>
      <RemoveLine Path="Southwind.Web\ServerSouthwind.svc.cs" From="public override void Login(string username, string passwordHash)" To="} //Login"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" From="AuthLogic.UserLogingIn += user =>" To="}; //UserLogingIn" />
      <RemoveLine Path="Southwind.Web\Global.asax.cs" From="Navigator.EntitySettings&lt;UserDN&gt;().CreateViewOverride()" To=".AfterLine((UserDN u) => u.Related, (html, tc) => html.ValueLine(tc, u => u.Mixin&lt;UserMixin&gt;().AllowLogin));" />
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" From="Navigator.EntitySettings&lt;UserDN&gt;().OverrideView((usr, ctrl) =>" To="});" />
    </Module>

    <Module Name="Alerts">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="AlertLogic.Start(sb, dqm, new[] { typeof(PersonDN), typeof(CompanyDN), typeof(OrderDN) });"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.OverrideAttributes((AlertDN a) => a.CreatedBy, new ImplementedByAttribute(typeof(UserDN)));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.OverrideAttributes((AlertDN a) => a.AttendedBy, new ImplementedByAttribute(typeof(UserDN)));"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="AlertClient.Start();"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="AlertClient.Start(typeof(OrderDN));"/>
    </Module>

    <Module Name="Notes">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="NoteLogic.Start(sb, dqm, new[] { typeof(PersonDN), typeof(CompanyDN), typeof(OrderDN) });"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="sb.Schema.Settings.OverrideAttributes((NoteDN n) => n.CreatedBy, new ImplementedByAttribute(typeof(UserDN)));"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="NoteClient.Start();"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="NoteClient.Start();"/>
    </Module>

    <Module Name="Cache">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="CacheLogic.Start(sb);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="SetupCache(sb);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="private static void SetupCache(SchemaBuilder sb)" To="}"/>
    </Module>

    <Module Name="SplitDB">
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="string logPostfix = Connector.TryExtractCatalogPostfix(ref connectionString, &quot;_Log&quot;);"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="if (logPostfix.HasText())"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" Line="SetLogDatabase(sb.Schema, new DatabaseName(null, ((SqlConnector)Connector.Current).DatabaseName() + logPostfix));"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="public static void SetLogDatabase(Schema schema, DatabaseName logDatabaseName)" To="}"/>
    </Module>

    <Module Name="ThemeSelector">
      <RemoveFiles Path="Southwind.Web\Libs\bootstrap\themes"/>
      <RemoveLine Path="Southwind.Web\Scripts\southwind.ts" From="$(&quot;#themeSelector&quot;).bind(&quot;change&quot;, function () {" To="});"/>
      <RemoveLine Path="Southwind.Web\Scripts\southwind.js" From="$(&quot;#themeSelector&quot;).bind(&quot;change&quot;, function () {" To="});"/>
      <RemoveLine Path="Southwind.Web\Views\Shared\_Layout.cshtml" From="&lt;li class=&quot;theme-selector-container&quot;&gt;" To="&lt;/li&gt;"/>
	    <RemoveLine Path="Southwind.Web\Controllers\HomeController.cs" From="public ActionResult ChangeTheme()" To="}"/>
	    <RemoveLine Path="Southwind.Web\Code\SouthwindClient.cs" Line="public static string ThemeSessionKey = &quot;swCurrentTheme&quot;;"/>
	  </Module>

    <Module Name="Translation">
      <RemoveFiles Path="Southwind\Southwind.Load\Category.es.View.xlsx"/>
      <RemoveLine Path="Southwind\Southwind.Entities\Product.cs" Line="[TranslateField] //Localize categoryName column"/>
      <RemoveLine Path="Southwind\Southwind.Entities\Product.cs" Line="[TranslateField] //Localize description column"/>
      <RemoveLine Path="Southwind.Web\Scripts\southwind.ts" From="$(&quot;#languageSelector&quot;).bind(&quot;change&quot;, function () {" To="});"/>
      <RemoveLine Path="Southwind.Web\Scripts\southwind.js" From="$(&quot;#languageSelector&quot;).bind(&quot;change&quot;, function () {" To="});"/>
      <RemoveLine Path="Southwind.Web\Controllers\HomeController.cs" From="public ActionResult ChangeLanguage()" To="} //ChangeLanguage"/>
     
    </Module>

    <Module Name="PublicCatalog" DependsOn="Translation,Cache">
      <RemoveLine Path="Southwind.Logic\ProductLogic.cs" Line="public static ResetLazy&lt;Dictionary&lt;CategoryDN, List&lt;ProductDN&gt;&gt;&gt; ActiveProducts;"/>
      <RemoveLine Path="Southwind.Logic\ProductLogic.cs" From="ActiveProducts = sb.GlobalLazy(() =>" To="new InvalidateWith(typeof(ProductDN)));"/>
      <RemoveFiles Path="Southwind.Web\Views\Home\PublicCatalog.cshtml"/>
      <RemoveLine Path="Southwind.Web\Views\Shared\_Layout.cshtml" From="&lt;li class=&quot;language-selector-container&quot;&gt;" To="&lt;/li&gt;"/>
      <RemoveLine Path="Southwind.Web\Views\Shared\Menu.cshtml" From="new WebMenuItem  //Catalog" To="}, //Catalog"/>
      <RemoveSpanInLines Path="Southwind.Web\Controllers\HomeController.cs" Span="[AuthenticationRequired(false)]"/>
      <RemoveLine Path="Southwind.Web\Controllers\HomeController.cs" From="public ActionResult PublicCatalog()" To="} //PublicCatalog"/>
    </Module>

    <Module Name="Profiler">
      <RemoveLine Path="Southwind.Web/ServerSouthwind.svc.cs" From="string longDescription = mi.Name + description == null ? null : (&quot; &quot; + description);" To="using (HeavyProfiler.Log(&quot;WCF&quot;, () => longDescription))"/>
      <RemoveLine Path="Southwind.Logic\Starter.cs" From="ProfilerLogic.Start(sb, dqm," To="overrideSessionTimeout: true);"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="SignumControllerFactory.EveryController().AddFilters(new ProfilerFilterAttribute());"/>
      <RemoveLine Path="Southwind.Web\Global.asax.cs" Line="ProfilerClient.Start();"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" Line="ProfilerClient.Start();"/>
    </Module>

    <Module Name="Omnibox">
      <RemoveLine Path="Southwind.Web\Global.asax.cs" From="OmniboxClient.Start();" To="OmniboxClient.Register(new DashboardOmniboxProvider());"/>
      <RemoveLine Path="Southwind.Windows\App.xaml.cs" From="OmniboxClient.Start();" To="OmniboxClient.Register(new DashboardOmniboxProvider());"/>
    </Module>
  </Modules>

  <Projects>
    <Project Path ="Southwind.Entities\Southwind.Entities.csproj"/>
    <Project Path ="Southwind.Load\Southwind.Load.csproj"/>
    <Project Path ="Southwind.Local\Southwind.Local.csproj"/>
    <Project Path ="Southwind.Logic\Southwind.Logic.csproj"/>
    <Project Path ="Southwind.Web\Southwind.Web.csproj"/>
    <Project Path ="Southwind.Windows\Southwind.Windows.csproj"/>
  </Projects>

  <Solutions>
    <Solution Path="Southwind.sln" />
  </Solutions>
</File>
